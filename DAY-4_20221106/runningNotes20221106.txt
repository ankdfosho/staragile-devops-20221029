Agenda :

Module 2 - Managing Source Code - Git and GitHub [Completed]
Topics:
•	Overview of Version Control systems
•	Central vs Distributed Control systems
•	Introduction to Git
•	Git file workflow
•	Important Git Commands
•	Branching and Merging, Stashing, Rebasing, Reverting and Resetting 
•	Introduction to GitHub
•	Using Git and GitHub together.

Module 3 – Understanding and using Build tools [Completed]
Topics:
•	Overview of Various Build tools
•	What is Maven
•	Maven Plugins
•	Maven Archetypes
•	Project Object Model (POM)
•	Source Control Integration

Module 6 - Continuous Testing   [Completed]
Topics:
•	Overview of Continuous Testing
•	Software Testing Life cycle
•	Different Types of Testing
•	Test -Driven Development Approach using Junit
•	Testing Web Applications using Selenium

Practical’s & Demo to be covered:
Test-Driven Development Approach using Junit, Working with Selenium

# ----------------------------------------------------#

Module 5 - Continuous Integration using Jenkins
Topics: 
•	Overview of Continuous Integration
•	Overview of Jenkins 
•	Jenkins architecture
•	Installing and Configuring Jenkins
•	Jenkins Management
•	Jenkins Build Pipeline

Practical’s to be covered: 
•	Installing and configuring Jenkins
•	Creating a build using Jenkins
•	Integrating with Jenkins
•	Working with Jenkins Pipelines



# ----------------------------------------------------#
Java Project :
    - WebApplication :
        - Java 
        - WebFramework : SpringBoot (HTML, CSS, JS etc....)
        - Build Tool : Maven 

A Build Lifecycle is Made Up of Phases
Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

For example, the default lifecycle comprises of the following phases (for a complete list of the lifecycle phases, refer to the Lifecycle Reference):

validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
verify - run any checks on results of integration tests to ensure quality criteria are met
install - install the package into the local repository, for use as a dependency in other projects locally
deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.


Q?